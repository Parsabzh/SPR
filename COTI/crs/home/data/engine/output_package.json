[
    {
        "softwareVersion": "0.0.1.1",
        "about": "",
        "abstract": "Please use the Anaconda installer.",
        "dateModified": "Jul 18, 2018",
        "name": "anaconda",
        "url": "https://pypi.org/project/anaconda/",
        "Quality Attribute": "anaconda",
        "Resource utilization": "Medium",
        "Co-existence": "Medium",
        "Installability": "Medium",
        "Availability": "Low",
        "Authenticity": "High",
        "Appropriateness recognizability": "Medium",
        "User interface aesthetics": "Medium",
        "Time behaviour": "Medium",
        "Functional completeness": "Medium",
        "Modifiability": "High",
        "Learnability": "Medium",
        "Recoverability": "Medium",
        "Operability": "High",
        "Modularity": "Low",
        "Maturity": "Medium",
        "Functional correctness": "null",
        "Confidentiality": "Low",
        "Functional appropriateness": "null",
        "Adaptability": "Medium",
        "Capacity": "High",
        "Reusability": "null",
        "Fault tolerance": "High",
        "Integrity": "Medium",
        "Accessibility": "null",
        "User error protection": "null",
        "Testability": "Low",
        "Analysability": "null",
        "Interoperability": "null",
        "Accountability": "null",
        "Non-repudiation": "null",
        "Replaceability": "null"
    },
    {
        "softwareVersion": "3.2.2",
        "about": "Development on the 3.x series of Beautiful Soup ended in 2011, and the series will be discontinued on January 1, 2021, one year after the Python 2 sunsetting date. At some point after that, the 'beautifulsoup' pip package will be updated to a recent version of Beautiful Soup. If you're relying on version 3 of Beautiful Soup, you really ought to port your code to Python 3.",
        "abstract": "Screen-scraping library",
        "dateModified": "Oct 5, 2019",
        "name": "BeautifulSoup",
        "url": "https://pypi.org/project/beautifulsoup/",
        "Quality Attribute": "beautifulsoup",
        "Resource utilization": "Medium",
        "Co-existence": "High",
        "Installability": "Medium",
        "Availability": "Medium",
        "Authenticity": "Medium",
        "Appropriateness recognizability": "Medium",
        "User interface aesthetics": "Low",
        "Time behaviour": "Medium",
        "Functional completeness": "Low",
        "Modifiability": "Medium",
        "Learnability": "Medium",
        "Recoverability": "null",
        "Operability": "Low",
        "Modularity": "null",
        "Maturity": "High",
        "Functional correctness": "Medium",
        "Confidentiality": "Low",
        "Functional appropriateness": "Medium",
        "Adaptability": "null",
        "Capacity": "Medium",
        "Reusability": "Medium",
        "Fault tolerance": "Medium",
        "Integrity": "Medium",
        "Accessibility": "Medium",
        "User error protection": "Low",
        "Testability": "null",
        "Analysability": "Medium",
        "Interoperability": "null",
        "Accountability": "null",
        "Non-repudiation": "null",
        "Replaceability": "null"
    },
    {
        "softwareVersion": "5.0",
        "about": "If you\u2019re just getting started, here\u2019s how we recommend you read the docs:\nFirst, read docs/intro/install.txt for instructions on installing Django. You\u2019ll probably want to read through the topical guides (in docs/topics) next; from there you can jump to the HOWTOs (in docs/howto) for specific problems, and check out the reference (docs/ref) for gory details. If you find any problems in the docs, or think they should be clarified in any way, please take 30 seconds to fill out a ticket here: https://code.djangoproject.com/newticket\nTo get more help:\nJoin the #django channel on irc.libera.chat. Join the django-users mailing list, or read the archives, at https://groups.google.com/group/django-users. To run Django\u2019s test suite:\nFollow the instructions in the \u201cUnit tests\u201d section of docs/internals/contributing/writing-code/unit-tests.txt, published online at https://docs.djangoproject.com/en/dev/internals/contributing/writing-code/unit-tests/#running-the-unit-tests\nSupporting the Development of Django\nDjango\u2019s development depends on your contributions. If you depend on Django, remember to support the Django Software Foundation: https://www.djangoproject.com/fundraising/",
        "abstract": "A high-level Python web framework that encourages rapid development and clean, pragmatic design.",
        "dateModified": "Dec 4, 2023",
        "name": "Django",
        "url": "https://pypi.org/project/django/",
        "Quality Attribute": "django",
        "Resource utilization": "Medium",
        "Co-existence": "Medium",
        "Installability": "Medium",
        "Availability": "Medium",
        "Authenticity": "Medium",
        "Appropriateness recognizability": "Medium",
        "User interface aesthetics": "Medium",
        "Time behaviour": "Medium",
        "Functional completeness": "Medium",
        "Modifiability": "High",
        "Learnability": "Medium",
        "Recoverability": "Medium",
        "Operability": "High",
        "Modularity": "Medium",
        "Maturity": "Medium",
        "Functional correctness": "Medium",
        "Confidentiality": "Medium",
        "Functional appropriateness": "Medium",
        "Adaptability": "Medium",
        "Capacity": "High",
        "Reusability": "High",
        "Fault tolerance": "Medium",
        "Integrity": "Medium",
        "Accessibility": "High",
        "User error protection": "Medium",
        "Testability": "Medium",
        "Analysability": "Medium",
        "Interoperability": "null",
        "Accountability": "Medium",
        "Non-repudiation": "Medium",
        "Replaceability": "null"
    },
    {
        "softwareVersion": "3.0.0",
        "about": "Installing\nInstall and update using pip:\n$ pip install -U Flask\nA Simple Example\n# save this as app.py\nfrom flask import Flask\n\napp = Flask(__name__)\n\n@app.route(\"/\")\ndef hello():\n    return \"Hello, World!\" $ flask run\n  * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)\nContributing\nFor guidance on setting up a development environment and how to make a contribution to Flask, see the contributing guidelines. Links\nDocumentation: https://flask.palletsprojects.com/\nChanges: https://flask.palletsprojects.com/changes/\nPyPI Releases: https://pypi.org/project/Flask/\nSource Code: https://github.com/pallets/flask/\nIssue Tracker: https://github.com/pallets/flask/issues/\nChat: https://discord.gg/pallets",
        "abstract": "A simple framework for building complex web applications.",
        "dateModified": "Sep 30, 2023",
        "name": "Flask",
        "url": "https://pypi.org/project/flask/",
        "Quality Attribute": "flask",
        "Resource utilization": "null",
        "Co-existence": "Medium",
        "Installability": "High",
        "Availability": "null",
        "Authenticity": "Low",
        "Appropriateness recognizability": "High",
        "User interface aesthetics": "Medium",
        "Time behaviour": "High",
        "Functional completeness": "null",
        "Modifiability": "Low",
        "Learnability": "High",
        "Recoverability": "null",
        "Operability": "High",
        "Modularity": "null",
        "Maturity": "Medium",
        "Functional correctness": "null",
        "Confidentiality": "Low",
        "Functional appropriateness": "null",
        "Adaptability": "null",
        "Capacity": "Medium",
        "Reusability": "null",
        "Fault tolerance": "Medium",
        "Integrity": "null",
        "Accessibility": "null",
        "User error protection": "null",
        "Testability": "null",
        "Analysability": "null",
        "Interoperability": "null",
        "Accountability": "null",
        "Non-repudiation": "null",
        "Replaceability": "null"
    },
    {
        "softwareVersion": "4.3.2",
        "about": "Gensim is a Python library for topic modelling, document indexing and similarity retrieval with large corpora. the corpus size (can process input larger than RAM, streamed, out-of-core)\nIntuitive interfaces\neasy to plug in your own input corpus/datastream (simple streaming API)\neasy to extend with other Vector Space algorithms (simple transformation API)\nEfficient multicore implementations of popular algorithms, such as online Latent Semantic Analysis (LSA/LSI/SVD), Latent Dirichlet Allocation (LDA), Random Projections (RP), Hierarchical Dirichlet Process (HDP) or word2vec deep learning. Install the latest version of gensim:\npip install --upgrade gensim\nOr, if you have instead downloaded and unzipped the source tar.gz package:\npython setup.py install\nFor alternative modes of installation, see the documentation. So while gensim-the-top-level-code is pure Python, it actually executes highly optimized Fortran/C under the hood, including multithreading (if your BLAS is so configured). Memory-wise, gensim makes heavy use of Python\u2019s built-in generators and iterators for streamed data processing. Documentation\nQuickStart\nTutorials\nTutorial Videos\nOfficial Documentation and Walkthrough\nCiting gensim\nWhen citing gensim in academic papers and theses, please use this BibTeX entry:\n@inproceedings{rehurek_lrec,\n      title = {{Software Framework for Topic Modelling with Large Corpora}},\n      author = {Radim {\\v R}eh{\\r u}{\\v r}ek and Petr Sojka},\n      booktitle = {{Proceedings of the LREC 2010 Workshop on New\n           Challenges for NLP Frameworks}},\n      pages = {45--50},\n      year = 2010,\n      month = May,\n      day = 22,\n      publisher = {ELRA},\n      address = {Valletta, Malta},\n      language={English}\n}\nGensim is open source software released under the GNU LGPLv2.1 license.",
        "abstract": "Python framework for fast Vector Space Modelling",
        "dateModified": "Aug 24, 2023",
        "name": "gensim",
        "url": "https://pypi.org/project/gensim/",
        "Quality Attribute": "gensim",
        "Resource utilization": "null",
        "Co-existence": "Medium",
        "Installability": "null",
        "Availability": "High",
        "Authenticity": "null",
        "Appropriateness recognizability": "null",
        "User interface aesthetics": "null",
        "Time behaviour": "High",
        "Functional completeness": "null",
        "Modifiability": "null",
        "Learnability": "High",
        "Recoverability": "null",
        "Operability": "High",
        "Modularity": "null",
        "Maturity": "null",
        "Functional correctness": "null",
        "Confidentiality": "null",
        "Functional appropriateness": "null",
        "Adaptability": "null",
        "Capacity": "null",
        "Reusability": "null",
        "Fault tolerance": "null",
        "Integrity": "null",
        "Accessibility": "null",
        "User error protection": "null",
        "Testability": "null",
        "Analysability": "null",
        "Interoperability": "null",
        "Accountability": "null",
        "Non-repudiation": "null",
        "Replaceability": "null"
    },
    {
        "softwareVersion": "2.0.2",
        "about": "See <https://kafka-python.readthedocs.io/en/master/compatibility.html> for more details. >>> pip install kafka-python\nKafkaConsumer\nKafkaConsumer is a high-level message consumer, intended to operate as similarly as possible to the official java client. See <https://kafka-python.readthedocs.io/en/master/apidoc/KafkaConsumer.html> for API and configuration details. The consumer iterator returns ConsumerRecords, which are simple namedtuples that expose basic message attributes: topic, partition, offset, key, and value:\n>>> from kafka import KafkaConsumer\n>>> consumer = KafkaConsumer('my_favorite_topic')\n>>> for msg in consumer:\n...     print (msg)\n>>> # join a consumer group for dynamic partition assignment and offset commits\n>>> from kafka import KafkaConsumer\n>>> consumer = KafkaConsumer('my_favorite_topic', group_id='my_favorite_group')\n>>> for msg in consumer:\n...     print (msg)\n>>> # manually assign the partition list for the consumer\n>>> from kafka import TopicPartition\n>>> consumer = KafkaConsumer(bootstrap_servers='localhost:1234')\n>>> consumer.assign([TopicPartition('foobar', 2)])\n>>> msg = next(consumer)\n>>> # Deserialize msgpack-encoded values\n>>> consumer = KafkaConsumer(value_deserializer=msgpack.loads)\n>>> consumer.subscribe(['msgpackfoo'])\n>>> for msg in consumer:\n...     assert isinstance(msg.value, dict)\n>>> # Access record headers. The returned value is a list of tuples\n>>> # with str, bytes for key and value\n>>> for msg in consumer:\n...     print (msg.headers)\n>>> # Get consumer metrics\n>>> metrics = consumer.metrics()\nKafkaProducer\nKafkaProducer is a high-level, asynchronous message producer. See <https://kafka-python.readthedocs.io/en/master/apidoc/KafkaProducer.html> for more details. >>> from kafka import KafkaProducer\n>>> producer = KafkaProducer(bootstrap_servers='localhost:1234')\n>>> for _ in range(100):\n...     producer.send('foobar', b'some_message_bytes')\n>>> # Block until a single message is sent (or timeout)\n>>> future = producer.send('foobar', b'another_message')\n>>> result = future.get(timeout=60)\n>>> # Block until all pending messages are at least put on the network\n>>> # NOTE: This does not guarantee delivery or success! It is really\n>>> # only useful if you configure internal batching using linger_ms\n>>> producer.flush()\n>>> # Use a key for hashed-partitioning\n>>> producer.send('foobar', key=b'foo', value=b'bar')\n>>> # Serialize json messages\n>>> import json\n>>> producer = KafkaProducer(value_serializer=lambda v: json.dumps(v).encode('utf-8'))\n>>> producer.send('fizzbuzz', {'foo': 'bar'})\n>>> # Serialize string keys\n>>> producer = KafkaProducer(key_serializer=str.encode)\n>>> producer.send('flipflap', key='ping', value=b'1234')\n>>> # Compress messages\n>>> producer = KafkaProducer(compression_type='gzip')\n>>> for i in range(1000):\n...     producer.send('foobar', b'msg %d' % i)\n>>> # Include record headers. >>> producer.send('foobar', value=b'c29tZSB2YWx1ZQ==', headers=[('content-encoding', b'base64')])\n>>> # Get producer performance metrics\n>>> metrics = producer.metrics()\nThread safety\nThe KafkaProducer can be used across threads without issue, unlike the KafkaConsumer which cannot. See <https://kafka-python.readthedocs.io/en/master/install.html#optional-snappy-install> for more information.",
        "abstract": "Pure Python client for Apache Kafka",
        "dateModified": "Sep 30, 2020",
        "name": "kafka-python",
        "url": "https://pypi.org/project/kafka-python/",
        "Quality Attribute": "kafka-python",
        "Resource utilization": "Medium",
        "Co-existence": "Medium",
        "Installability": "Medium",
        "Availability": "Medium",
        "Authenticity": "Medium",
        "Appropriateness recognizability": "Medium",
        "User interface aesthetics": "Medium",
        "Time behaviour": "Medium",
        "Functional completeness": "Medium",
        "Modifiability": "Medium",
        "Learnability": "Medium",
        "Recoverability": "Medium",
        "Operability": "Medium",
        "Modularity": "Medium",
        "Maturity": "Medium",
        "Functional correctness": "Medium",
        "Confidentiality": "Medium",
        "Functional appropriateness": "Medium",
        "Adaptability": "Medium",
        "Capacity": "Medium",
        "Reusability": "null",
        "Fault tolerance": "Medium",
        "Integrity": "Medium",
        "Accessibility": "null",
        "User error protection": "Medium",
        "Testability": "Medium",
        "Analysability": "Medium",
        "Interoperability": "Medium",
        "Accountability": "Medium",
        "Non-repudiation": "Medium",
        "Replaceability": "null"
    },
    {
        "softwareVersion": "3.0.0",
        "about": "Keras 3: A new multi-backend Keras\nKeras 3 is a new multi-backend implementation of the Keras API, with support for TensorFlow, JAX, and PyTorch. Install keras-core:\npip install keras-core\nInstall backend package(s). To use keras-core, you should also install the backend of choice: tensorflow, jax, or torch. python pip_build.py --install\nThe requirements.txt file will install a CPU-only version of TensorFlow, JAX, and PyTorch. As an example, here is how to create a Jax GPU environment with conda:\nconda create -y -n keras-jax python=3.10\nconda activate keras-jax\npip install -r requirements-jax-cuda.txt\npython pip_build.py --install\nConfiguring your backend\nYou can export the environment variable KERAS_BACKEND or you can edit your local config file at ~/.keras/keras.json to configure your backend. Example:\nexport KERAS_BACKEND=\"jax\"\nIn Colab, you can do:\nimport os\nos.environ[\"KERAS_BACKEND\"] = \"jax\"\n\nimport keras_core as keras\nNote: The backend must be configured before importing keras, and the backend cannot be changed after the package has been imported. Just take your existing tf.keras code, make sure that your calls to model.save() are using the up-to-date .keras format, and you're done. If your tf.keras model does not include custom components, you can start running it on top of JAX or PyTorch immediately. In addition, Keras models can consume datasets in any format, regardless of the backend you're using: you can train your models with your existing tf.data.Dataset pipelines or PyTorch DataLoaders. You can take a Keras model and train it in a training loop written from scratch in native TF, JAX, or PyTorch.",
        "abstract": "Multi-backend Keras.",
        "dateModified": "Nov 28, 2023",
        "name": "keras",
        "url": "https://pypi.org/project/keras/",
        "Quality Attribute": "keras",
        "Resource utilization": "Medium",
        "Co-existence": "Medium",
        "Installability": "Medium",
        "Availability": "Medium",
        "Authenticity": "null",
        "Appropriateness recognizability": "Medium",
        "User interface aesthetics": "High",
        "Time behaviour": "Medium",
        "Functional completeness": "null",
        "Modifiability": "Medium",
        "Learnability": "High",
        "Recoverability": "Medium",
        "Operability": "High",
        "Modularity": "High",
        "Maturity": "Medium",
        "Functional correctness": "Medium",
        "Confidentiality": "Low",
        "Functional appropriateness": "Low",
        "Adaptability": "Medium",
        "Capacity": "Medium",
        "Reusability": "High",
        "Fault tolerance": "High",
        "Integrity": "null",
        "Accessibility": "null",
        "User error protection": "null",
        "Testability": "null",
        "Analysability": "null",
        "Interoperability": "null",
        "Accountability": "null",
        "Non-repudiation": "null",
        "Replaceability": "null"
    },
    {
        "softwareVersion": "3.8.2",
        "about": "Matplotlib is a comprehensive library for creating static, animated, and interactive visualizations in Python. Matplotlib can be used in Python scripts, Python/IPython shells, web application servers, and various graphical user interface toolkits. Install\nSee the install documentation, which is generated from /doc/users/installing/index.rst\nContribute\nYou've discovered a bug or something else you want to change \u2014 excellent! Our active mailing lists (which are mirrored on Discourse) are:\nUsers mailing list: matplotlib-users@python.org\nAnnouncement mailing list: matplotlib-announce@python.org\nDevelopment mailing list: matplotlib-devel@python.org\nGitter is for coordinating development and asking questions directly related to contributing to matplotlib. Citing Matplotlib\nIf Matplotlib contributes to a project that leads to publication, please acknowledge this by citing Matplotlib.",
        "abstract": "Python plotting package",
        "dateModified": "Nov 17, 2023",
        "name": "matplotlib",
        "url": "https://pypi.org/project/matplotlib/",
        "Quality Attribute": "matplotlib",
        "Resource utilization": "Medium",
        "Co-existence": "Medium",
        "Installability": "Medium",
        "Availability": "Low",
        "Authenticity": "null",
        "Appropriateness recognizability": "Medium",
        "User interface aesthetics": "Medium",
        "Time behaviour": "Medium",
        "Functional completeness": "null",
        "Modifiability": "Medium",
        "Learnability": "Medium",
        "Recoverability": "Medium",
        "Operability": "High",
        "Modularity": "Medium",
        "Maturity": "Medium",
        "Functional correctness": "Medium",
        "Confidentiality": "Medium",
        "Functional appropriateness": "Medium",
        "Adaptability": "Medium",
        "Capacity": "Low",
        "Reusability": "null",
        "Fault tolerance": "Medium",
        "Integrity": "null",
        "Accessibility": "Medium",
        "User error protection": "Low",
        "Testability": "null",
        "Analysability": "null",
        "Interoperability": "null",
        "Accountability": "null",
        "Non-repudiation": "null",
        "Replaceability": "null"
    },
    {
        "softwareVersion": "1.1.8",
        "about": "License\nMariaDB Connector/Python is licensed under the LGPL 2.1\nSource code\nMariaDB Connector/Python source code is hosted on Github\nDocumentation\nMariaDB Connector/Python documentation can be found on Github Pages\nBugs\nBugs and feature requests should be filed in the MariaDB bug ticket system",
        "abstract": "Python MariaDB extension",
        "dateModified": "Oct 13, 2023",
        "name": "mariadb",
        "url": "https://pypi.org/project/mariadb/",
        "Quality Attribute": "mariadb",
        "Resource utilization": "null",
        "Co-existence": "High",
        "Installability": "High",
        "Availability": "High",
        "Authenticity": "null",
        "Appropriateness recognizability": "Low",
        "User interface aesthetics": "Medium",
        "Time behaviour": "High",
        "Functional completeness": "High",
        "Modifiability": "High",
        "Learnability": "High",
        "Recoverability": "Medium",
        "Operability": "High",
        "Modularity": "null",
        "Maturity": "High",
        "Functional correctness": "null",
        "Confidentiality": "Medium",
        "Functional appropriateness": "null",
        "Adaptability": "null",
        "Capacity": "High",
        "Reusability": "null",
        "Fault tolerance": "High",
        "Integrity": "Medium",
        "Accessibility": "High",
        "User error protection": "null",
        "Testability": "null",
        "Analysability": "null",
        "Interoperability": "High",
        "Accountability": "null",
        "Non-repudiation": "null",
        "Replaceability": "null"
    },
    {
        "softwareVersion": "0.0.3",
        "about": "This package is a \u2018virtual package\u2019, which requires MySQL-python (Python 2) or mysqlclient (Python 3) to install.",
        "abstract": "Virtual package for MySQL-python",
        "dateModified": "May 25, 2021",
        "name": "mysql",
        "url": "https://pypi.org/project/mysql/",
        "Quality Attribute": "mysql",
        "Resource utilization": "Medium",
        "Co-existence": "Medium",
        "Installability": "Medium",
        "Availability": "Medium",
        "Authenticity": "Medium",
        "Appropriateness recognizability": "Medium",
        "User interface aesthetics": "High",
        "Time behaviour": "Medium",
        "Functional completeness": "Medium",
        "Modifiability": "High",
        "Learnability": "High",
        "Recoverability": "Medium",
        "Operability": "High",
        "Modularity": "Medium",
        "Maturity": "High",
        "Functional correctness": "Medium",
        "Confidentiality": "Medium",
        "Functional appropriateness": "Medium",
        "Adaptability": "High",
        "Capacity": "Medium",
        "Reusability": "Medium",
        "Fault tolerance": "Medium",
        "Integrity": "Medium",
        "Accessibility": "High",
        "User error protection": "Low",
        "Testability": "null",
        "Analysability": "Medium",
        "Interoperability": "Medium",
        "Accountability": "Low",
        "Non-repudiation": "Low",
        "Replaceability": "null"
    },
    {
        "softwareVersion": "3.8.1",
        "about": "",
        "abstract": "Natural Language Toolkit",
        "dateModified": "Jan 2, 2023",
        "name": "nltk",
        "url": "https://pypi.org/project/nltk/",
        "Quality Attribute": "nltk",
        "Resource utilization": "Medium",
        "Co-existence": "High",
        "Installability": "High",
        "Availability": "Medium",
        "Authenticity": "null",
        "Appropriateness recognizability": "High",
        "User interface aesthetics": "null",
        "Time behaviour": "Medium",
        "Functional completeness": "null",
        "Modifiability": "null",
        "Learnability": "High",
        "Recoverability": "null",
        "Operability": "High",
        "Modularity": "null",
        "Maturity": "null",
        "Functional correctness": "null",
        "Confidentiality": "null",
        "Functional appropriateness": "null",
        "Adaptability": "null",
        "Capacity": "Low",
        "Reusability": "null",
        "Fault tolerance": "null",
        "Integrity": "null",
        "Accessibility": "null",
        "User error protection": "null",
        "Testability": "null",
        "Analysability": "null",
        "Interoperability": "null",
        "Accountability": "null",
        "Non-repudiation": "null",
        "Replaceability": "null"
    },
    {
        "softwareVersion": "1.26.2",
        "about": "Website: https://www.numpy.org\nDocumentation: https://numpy.org/doc\nMailing list: https://mail.python.org/mailman/listinfo/numpy-discussion\nSource code: https://github.com/numpy/numpy\nContributing: https://www.numpy.org/devdocs/dev/index.html\nBug reports: https://github.com/numpy/numpy/issues\nReport a security vulnerability: https://tidelift.com/docs/security\nIt provides:\na powerful N-dimensional array object\nsophisticated (broadcasting) functions\ntools for integrating C/C++ and Fortran code\nuseful linear algebra, Fourier transform, and random number capabilities\nTesting:\nNumPy requires pytest and hypothesis. Tests can then be run after installation with:\npython -c \"import numpy, sys; sys.exit(numpy.test() is False)\"\nCode of Conduct\nNumPy is a community-driven open source project developed by a diverse group of contributors. You can also:\nreview pull requests\nhelp us stay on top of new and old issues\ndevelop tutorials, presentations, and other educational materials\nmaintain and improve our website\ndevelop graphic design for our brand assets and promotional materials\ntranslate website content\nhelp with outreach and onboard new contributors\nwrite grant proposals and help with other fundraising efforts\nFor more information about the ways you can contribute to NumPy, visit our website. Our preferred channels of communication are all public, but if you\u2019d like to speak to us in private first, contact our community coordinators at numpy-team@googlegroups.com or on Slack (write numpy-team@googlegroups.com for an invitation).",
        "abstract": "Fundamental package for array computing in Python",
        "dateModified": "Nov 12, 2023",
        "name": "numpy",
        "url": "https://pypi.org/project/numpy/",
        "Quality Attribute": "numpy",
        "Resource utilization": "Medium",
        "Co-existence": "Medium",
        "Installability": "Medium",
        "Availability": "Low",
        "Authenticity": "Medium",
        "Appropriateness recognizability": "Medium",
        "User interface aesthetics": "Medium",
        "Time behaviour": "Medium",
        "Functional completeness": "High",
        "Modifiability": "High",
        "Learnability": "Medium",
        "Recoverability": "Medium",
        "Operability": "High",
        "Modularity": "Medium",
        "Maturity": "Medium",
        "Functional correctness": "Medium",
        "Confidentiality": "Medium",
        "Functional appropriateness": "Medium",
        "Adaptability": "Medium",
        "Capacity": "Medium",
        "Reusability": "Medium",
        "Fault tolerance": "Medium",
        "Integrity": "Medium",
        "Accessibility": "Medium",
        "User error protection": "Medium",
        "Testability": "Medium",
        "Analysability": "Low",
        "Interoperability": "High",
        "Accountability": "null",
        "Non-repudiation": "null",
        "Replaceability": "null"
    },
    {
        "softwareVersion": "4.8.1.78",
        "about": "OpenCV on Wheels\nInstallation and Usage\nFrequently Asked Questions\nDocumentation for opencv-python\nCI build process\nManual builds\nManual debug builds\nSource distributions\nLicensing\nVersioning\nReleases\nDevelopment builds\nManylinux wheels\nSupported Python versions\nBackward compatibility\nOpenCV on Wheels\nPre-built CPU-only OpenCV packages for Python. Installation and Usage\nIf you have previous/other manually installed (= not installed via pip) version of OpenCV installed (e.g. Make sure that your pip version is up-to-date (19.3 is the minimum supported version): pip install --upgrade pip. Select the correct package for your environment:\nThere are four different packages (see options 1, 2, 3 and 4 below) and you should SELECT ONLY ONE OF THEM. Packages for standard desktop environments (Windows, macOS, almost any GNU/Linux distribution)\nOption 1 - Main modules package: pip install opencv-python\nOption 2 - Full package (contains both main modules and contrib/extra modules): pip install opencv-contrib-python (check contrib/extra modules listing from OpenCV documentation)\nb. ), no GUI library dependencies\nThese packages are smaller than the two other packages above because they do not contain any GUI functionality (not compiled with Qt / other GUI components). Option 3 - Headless main modules package: pip install opencv-python-headless\nOption 4 - Headless full package (contains both main modules and contrib/extra modules): pip install opencv-contrib-python-headless (check contrib/extra modules listing from OpenCV documentation)\nImport the package:\nimport cv2\nAll packages contain Haar cascade files. For example:\ncv2.CascadeClassifier(cv2.data.haarcascades + \"haarcascade_frontalface_default.xml\")\nRead OpenCV documentation\nBefore opening a new issue, read the FAQ below and have a look at the other issues which are already open. A: No, the packages are special wheel binary packages and they already contain statically built OpenCV binaries. If your pip is too old, it will try to use the new source distribution introduced in 4.3.0.38 to manually build OpenCV because it does not know how to install manylinux2014 wheels. To use the new manylinux2014 pre-built wheels (or to build from source), your pip version must be >= 19.3. If you still encounter the error after you have checked all the previous solutions, download Dependencies and open the cv2.pyd (located usually at C:\\Users\\username\\AppData\\Local\\Programs\\Python\\PythonXX\\Lib\\site-packages\\cv2) file with it to debug missing DLL issues. A: Make sure you have removed old manual installations of OpenCV Python bindings (cv2.so or cv2.pyd in site-packages). A: The repository contains only OpenCV-Python package build scripts, but not OpenCV itself. See this issue for more info: https://github.com/skvark/opencv-python/issues/126\nQ: Why the package and import are different (opencv-python vs. cv2)? A: It's easier for users to understand opencv-python than cv2 and it makes it easier to find the package with search engines. The build process for a single entry in the build matrices is as follows (see for example .github/workflows/build_wheels_linux.yml file):\nIn Linux and MacOS build: get OpenCV's optional C dependencies that we compile against\nCheckout repository and submodules\nOpenCV is included as submodule and the version is updated manually by maintainers when a new OpenCV release has been made\nContrib modules are also included as a submodule\nFind OpenCV version from the sources\nBuild OpenCV\ntests are disabled, otherwise build time increases too much\nthere are 4 build matrix entries for each build combination: with and without contrib modules, with and without GUI (headless)\nLinux builds run in manylinux Docker containers (CentOS 5)\nsource distributions are separate entries in the build matrix\nRearrange OpenCV's build result, add our custom files and generate wheel\nLinux and macOS wheels are transformed with auditwheel and delocate, correspondingly\nInstall the generated wheel\nTest that Python can import the library and run some sanity checks\nUse twine to upload the generated wheel to PyPI (only in release builds)\nSteps 1--4 are handled by pip wheel. In addition to any variables that OpenCV's build accepts, we recognize:\nCI_BUILD. Clone this repository: git clone --recursive https://github.com/opencv/opencv-python.git\ncd opencv-python\nyou can use git to checkout some other version of OpenCV in the opencv and opencv_contrib submodules if needed\nAdd custom Cmake flags if needed, for example: export CMAKE_ARGS=\"-DSOME_FLAG=ON -DSOME_OTHER_FLAG=OFF\" (in Windows you need to set environment variables differently depending on Command Line or PowerShell)\nSelect the package flavor which you wish to build with ENABLE_CONTRIB and ENABLE_HEADLESS: i.e. NOTE: make sure you have the latest pip version, the pip wheel command replaces the old python setup.py bdist_wheel command which does not support pyproject.toml. Optional: on Linux use some of the manylinux images as a build hosts if maximum portability is needed and run auditwheel for the wheel after build\nOptional: on macOS use delocate (same as auditwheel but for macOS) for better portability\nManual debug builds\nIn order to build opencv-python in an unoptimized debug build, you need to side-step the normal process a bit. If you would like the build produce all compiler commands, then the following combination of flags and environment variables has been tested to work on Linux:\nexport CMAKE_ARGS='-DCMAKE_VERBOSE_MAKEFILE=ON'\nexport VERBOSE=1\n\npython3 setup.py bdist_wheel --build-type=Debug\nSee this issue for more discussion: https://github.com/opencv/opencv-python/issues/424\nSource distributions\nSince OpenCV version 4.3.0, also source distributions are provided in PyPI. This means that if your system is not compatible with any of the wheels in PyPI, pip will attempt to build OpenCV from sources. If you need a OpenCV version which is not available in PyPI as a source distribution, please follow the manual build guidance above instead of this one. Some examples:\npip install --no-binary opencv-python opencv-python\npip install --no-binary :all: opencv-python\nIf you need contrib modules or headless version, just change the package name (step 4 in the previous section is not needed). These tags differentiate packages (this repo might have modifications but OpenCV version stays same) and should be incremented sequentially. Supported Python versions\nPython 3.x compatible pre-built wheels are provided for the officially supported Python versions (not in EOL):\n3.7\n3.8\n3.9\n3.10\n3.11\nBackward compatibility\nStarting from 4.2.0 and 3.4.9 builds the macOS Travis build environment was updated to XCode 9.4.",
        "abstract": "Wrapper package for OpenCV python bindings.",
        "dateModified": "Sep 28, 2023",
        "name": "opencv-python",
        "url": "https://pypi.org/project/opencv-python/",
        "Quality Attribute": "opencv-python",
        "Resource utilization": "Medium",
        "Co-existence": "Medium",
        "Installability": "Medium",
        "Availability": "Low",
        "Authenticity": "High",
        "Appropriateness recognizability": "Medium",
        "User interface aesthetics": "Medium",
        "Time behaviour": "Medium",
        "Functional completeness": "null",
        "Modifiability": "Medium",
        "Learnability": "Medium",
        "Recoverability": "Low",
        "Operability": "High",
        "Modularity": "null",
        "Maturity": "Medium",
        "Functional correctness": "Medium",
        "Confidentiality": "Medium",
        "Functional appropriateness": "Medium",
        "Adaptability": "High",
        "Capacity": "Medium",
        "Reusability": "High",
        "Fault tolerance": "Medium",
        "Integrity": "Medium",
        "Accessibility": "Medium",
        "User error protection": "null",
        "Testability": "null",
        "Analysability": "null",
        "Interoperability": "Medium",
        "Accountability": "null",
        "Non-repudiation": "null",
        "Replaceability": "null"
    },
    {
        "softwareVersion": "2.1.3",
        "about": "pandas is a Python package that provides fast, flexible, and expressive data structures designed to make working with \"relational\" or \"labeled\" data both easy and intuitive. Additionally, it has the broader goal of becoming the most powerful and flexible open source data analysis / manipulation tool available in any language. Table of Contents\nMain Features\nWhere to get it\nDependencies\nInstallation from sources\nLicense\nDocumentation\nBackground\nGetting Help\nDiscussion and Development\nContributing to pandas\nMain Features\nHere are just a few of the things that pandas does well:\nEasy handling of missing data (represented as NaN, NA, or NaT) in floating point as well as non-floating point data\nSize mutability: columns can be inserted and deleted from DataFrame and higher dimensional objects\nAutomatic and explicit data alignment: objects can be explicitly aligned to a set of labels, or the user can simply ignore the labels and let Series, DataFrame, etc. automatically align the data for you in computations\nPowerful, flexible group by functionality to perform split-apply-combine operations on data sets, for both aggregating and transforming data\nMake it easy to convert ragged, differently-indexed data in other Python and NumPy data structures into DataFrame objects\nIntelligent label-based slicing, fancy indexing, and subsetting of large data sets\nIntuitive merging and joining data sets\nFlexible reshaping and pivoting of data sets\nHierarchical labeling of axes (possible to have multiple labels per tick)\nRobust IO tools for loading data from flat files (CSV and delimited), Excel files, databases, and saving/loading data from the ultrafast HDF5 format\nTime series-specific functionality: date range generation and frequency conversion, moving window statistics, date shifting and lagging\nWhere to get it\nThe source code is currently hosted on GitHub at: https://github.com/pandas-dev/pandas\nBinary installers for the latest released version are available at the Python Package Index (PyPI) and on Conda. Dependencies\nNumPy - Adds support for large, multi-dimensional arrays, matrices and high-level mathematical functions to operate on these arrays\npython-dateutil - Provides powerful extensions to the standard datetime module\npytz - Brings the Olson tz database into Python which allows accurate and cross platform timezone calculations\nSee the full installation instructions for minimum supported versions of required, recommended and optional dependencies. Cython can be installed from PyPI:\npip install cython\nIn the pandas directory (same one where you found this file after cloning the git repo), execute:\npip install . Further, the pandas-dev mailing list can also be used for specialized discussions or design issues, and a Slack channel is available for quick development related questions.",
        "abstract": "Powerful data structures for data analysis, time series, and statistics",
        "dateModified": "Nov 10, 2023",
        "name": "pandas",
        "url": "https://pypi.org/project/pandas/",
        "Quality Attribute": "pandas",
        "Resource utilization": "Medium",
        "Co-existence": "Medium",
        "Installability": "Medium",
        "Availability": "Low",
        "Authenticity": "Medium",
        "Appropriateness recognizability": "Medium",
        "User interface aesthetics": "Medium",
        "Time behaviour": "Medium",
        "Functional completeness": "Medium",
        "Modifiability": "Medium",
        "Learnability": "Medium",
        "Recoverability": "Medium",
        "Operability": "High",
        "Modularity": "Medium",
        "Maturity": "Medium",
        "Functional correctness": "Medium",
        "Confidentiality": "Medium",
        "Functional appropriateness": "Medium",
        "Adaptability": "High",
        "Capacity": "Medium",
        "Reusability": "Medium",
        "Fault tolerance": "Medium",
        "Integrity": "Medium",
        "Accessibility": "High",
        "User error protection": "Medium",
        "Testability": "Medium",
        "Analysability": "Medium",
        "Interoperability": "null",
        "Accountability": "null",
        "Non-repudiation": "null",
        "Replaceability": "null"
    },
    {
        "softwareVersion": "2.14.2",
        "about": "Dash\nDash is the most downloaded, trusted Python framework for building ML & data science web apps. Built on top of Plotly.js, React and Flask, Dash ties modern UI elements like dropdowns, sliders, and graphs directly to your analytical Python code. Docs: Create your first Dash app in under 5 minutes\ndash.gallery: Dash app gallery with Python & R code\nDash App Examples\nDash App Description\nHere\u2019s a simple example of a Dash App that ties a Dropdown to a Plotly Graph. Dash app code is declarative and reactive, which makes it easy to build complex apps that contain many interactive elements. Dash OSS & Dash Enterprise\nWith Dash Open Source, Dash apps run on your local laptop or workstation, but cannot be easily accessed by others in your organization. Or, launch your initiative with Dash Enterprise from the start to unlock developer productivity gains and hands-on acceleration from Plotly's team. ML Ops Features: A one-stop shop for ML Ops: Horizontally scalable hosting, deployment, and authentication for your Dash apps. Dash Enterprise supports LDAP, AD, PKI, Okta, SAML, OpenID Connect, OAuth, SSO, and simple email authentication. Easily arrange, style, brand, and customize your Dash apps. Or, run a Python job through Dash and have Snapshot Engine email a report when the job is done. Dashboard Toolkit Drag & drop layouts, chart editing, and crossfilter for your Dash apps. Write and execute Python, R, & Julia code from Dash Enterprise's onboard code editor.",
        "abstract": "A Python framework for building reactive web-apps. Developed by Plotly.",
        "dateModified": "Nov 28, 2023",
        "name": "dash",
        "url": "https://pypi.org/project/dash/",
        "Quality Attribute": "dash",
        "Resource utilization": "null",
        "Co-existence": "High",
        "Installability": "High",
        "Availability": "null",
        "Authenticity": "null",
        "Appropriateness recognizability": "Medium",
        "User interface aesthetics": "High",
        "Time behaviour": "Medium",
        "Functional completeness": "null",
        "Modifiability": "Medium",
        "Learnability": "Low",
        "Recoverability": "null",
        "Operability": "High",
        "Modularity": "Medium",
        "Maturity": "High",
        "Functional correctness": "null",
        "Confidentiality": "null",
        "Functional appropriateness": "null",
        "Adaptability": "null",
        "Capacity": "Low",
        "Reusability": "null",
        "Fault tolerance": "Medium",
        "Integrity": "null",
        "Accessibility": "Low",
        "User error protection": "Low",
        "Testability": "null",
        "Analysability": "null",
        "Interoperability": "null",
        "Accountability": "null",
        "Non-repudiation": "null",
        "Replaceability": "null"
    },

    {
        "softwareVersion": "2.5.2",
        "about": "It uses the Simple DirectMedia Layer library and several other popular libraries to abstract the most common functions, making writing these programs a more intuitive task. Installation\nBefore installing pygame, you must check that Python is installed on your machine. To find out, open a command prompt (if you have Windows) or a terminal (if you have MacOS or Linux) and type this:\npython --version\nIf a message such as \u201cPython 3.8.10\u201d appears, it means that Python is correctly installed. Once Python is installed, you have to perform a final check: you have to see if pip is installed. Generally, pip is pre-installed with Python but we are never sure. Same as for Python, type the following command:\npip --version\nIf a message such as \u201cpip 20.0.2 from /usr/lib/python3/dist-packages/pip (python 3.8)\u201d appears, you are ready to install pygame! To install it, enter this command:\npip install pygame\nHelp\nIf you are just getting started with pygame, you should be able to get started fairly quickly. To upgrade to the latest full release, run pip install pygame --upgrade in your terminal. Best of all, the examples directory has many playable small programs which can get you started playing with the code right away. Pygame is a powerful library for game development, offering a wide range of features to simplify your coding journey. Let\u2019s delve into what Pygame has to offer:\nGraphics: With Pygame, creating dynamic and engaging graphics has never been easier. The library provides simple yet effective tools for 2D graphics and animation, including support for images, rectangles, and polygon shapes. Whether you\u2019re a seasoned game developer or just starting out, Pygame has you covered. Sound: Pygame also includes support for playing and manipulating sound and music, making it easy to add sound effects and background music to your games. Input: Pygame provides intuitive functions for handling keyboard, mouse, and joystick input, allowing you to quickly and easily implement player controls in your games. No more struggling with complex input code, Pygame makes it simple. Game Development: Lastly, Pygame provides a comprehensive suite of tools and features specifically designed for game development. From collision detection to sprite management, Pygame has everything you need to create exciting and engaging games. Whether you\u2019re building a platformer, puzzle game, or anything in between, Pygame has you covered. Building From Source\nIf you want to use features that are currently in development, or you want to contribute to pygame, you will need to build pygame locally from its source code, rather than pip installing it. Once that is done, run the setup.py script which will attempt to auto-configure, build, and install pygame. To contribute to the main project documentation, see docs/README.md or view more detailed instructions here. There is a draft of \u201cLet\u2019s write a unit test!\u201d which is a step by step guide on how to write your first unit test in python for pygame, which is very similar to how you would do it for other projects. Marcus Von Appen: many changes, and fixes, 1.7.1+ freebsd maintainer\nLenard Lindstrom: the 1.8+ windows maintainer, many changes, and fixes\nBrian Fisher for svn auto builder, bug tracker and many contributions\nRene Dudfield: many changes, and fixes, 1.7+ release manager/maintainer\nPhil Hassey for his work on the pygame.org website\nDR0ID for his work on the sprite module\nRichard Goedeken for his smoothscale function\nUlf Ekstr\u00f6m for his pixel perfect collision detection code\nPete Shinners: original author\nDavid Clark for filling the right-hand-man position\nEd Boraas and Francis Irving: Debian packages\nMaxim Sobolev: FreeBSD packaging\nBob Ippolito: MacOS and OS X porting (much work!) Jan Ekhol, Ray Kelm, and Peter Nicolai: putting up with early design ideas\nNat Pryce for starting our unit tests\nDan Richter for documentation work\nTheCorruptor for his incredible logos and graphics\nNicholas Dudfield: many test improvements\nAlex Folkner for pygame-ctypes\nThanks to those sending in patches and fixes: Niki Spahiev, Gordon Tyler, Nathaniel Pryce, Dave Wallace, John Popplewell, Michael Urman, Andrew Straw, Michael Hudson, Ole Martin Bjoerndalen, Herve Cauwelier, James Mazer, Lalo Martins, Timothy Stranex, Chad Lester, Matthias Spiller, Bo Jangeborg, Dmitry Borisov, Campbell Barton, Diego Essaya, Eyal Lotem, Regis Desgroppes, Emmanuel Hainry, Randy Kaelber Matthew L Daniel, Nirav Patel, Forrest Voight, Charlie Nolan, Frankie Robertson, John Krukoff, Lorenz Quack, Nick Irvine, Michael George, Saul Spatz, Thomas Ibbotson, Tom Rothamel, Evan Kroske, Cambell Barton. And our bug hunters above and beyond: Angus, Guillaume Proux, Frank Raiser, Austin Henry, Kaweh Kazemi, Arturo Aldama, Mike Mulcheck, Michael Benfield, David Lau\nThere\u2019s many more folks out there who\u2019ve submitted helpful ideas, kept this project going, and basically made our life easier. Many thank you\u2019s for people making documentation comments, and adding to the pygame.org wiki. Dependency versions:\nCPython\n>= 3.6 (Or use PyPy3)\nSDL\n>= 2.0.8\nSDL_mixer\n>= 2.0.0\nSDL_image\n>= 2.0.2\nSDL_ttf\n>= 2.0.11\nSDL_gfx\n(Optional, vendored in)\nNumPy\n>= 1.6.2 (Optional)\nLicense\nThis library is distributed under GNU LGPL version 2.1, which can be found in the file docs/LGPL.txt. This basically means you can use pygame in any project you want, but if you make any changes or additions to pygame itself, those must be released with a compatible license (preferably submitted back to the pygame project).",
        "abstract": "Python Game Development",
        "dateModified": "Sep 18, 2023",
        "name": "pygame",
        "url": "https://pypi.org/project/pygame/",
        "Quality Attribute": "pygame",
        "Resource utilization": "High",
        "Co-existence": "null",
        "Installability": "null",
        "Availability": "null",
        "Authenticity": "null",
        "Appropriateness recognizability": "High",
        "User interface aesthetics": "High",
        "Time behaviour": "High",
        "Functional completeness": "null",
        "Modifiability": "null",
        "Learnability": "High",
        "Recoverability": "null",
        "Operability": "High",
        "Modularity": "null",
        "Maturity": "High",
        "Functional correctness": "null",
        "Confidentiality": "null",
        "Functional appropriateness": "null",
        "Adaptability": "High",
        "Capacity": "null",
        "Reusability": "null",
        "Fault tolerance": "null",
        "Integrity": "null",
        "Accessibility": "null",
        "User error protection": "null",
        "Testability": "null",
        "Analysability": "null",
        "Interoperability": "null",
        "Accountability": "null",
        "Non-repudiation": "null",
        "Replaceability": "null"
    },
    {
        "softwareVersion": "3.5.0",
        "about": "It also supports a rich set of higher-level tools including Spark SQL for SQL and DataFrames, pandas API on Spark for pandas workloads, MLlib for machine learning, GraphX for graph processing, and Structured Streaming for stream processing. https://spark.apache.org/\nOnline Documentation\nYou can find the latest Spark documentation, including a programming guide, on the project web page\nPython Packaging\nThis README file only contains basic information related to pip installed PySpark. This Python packaged version of Spark is suitable for interacting with an existing cluster (be it Spark standalone, YARN, or Mesos) - but does not contain the tools required to set up your own standalone Spark cluster. Python Requirements\nAt its core PySpark depends on Py4J, but some additional sub-packages have their own extra requirements for some features (including numpy, pandas, and pyarrow).",
        "abstract": "Apache Spark Python API",
        "dateModified": "Sep 26, 2023",
        "name": "pyspark",
        "url": "https://pypi.org/project/pyspark/",
        "Quality Attribute": "pyspark",
        "Resource utilization": "Medium",
        "Co-existence": "Low",
        "Installability": "Medium",
        "Availability": "Medium",
        "Authenticity": "Low",
        "Appropriateness recognizability": "Medium",
        "User interface aesthetics": "Low",
        "Time behaviour": "Medium",
        "Functional completeness": "null",
        "Modifiability": "Medium",
        "Learnability": "null",
        "Recoverability": "null",
        "Operability": "null",
        "Modularity": "Medium",
        "Maturity": "Medium",
        "Functional correctness": "Medium",
        "Confidentiality": "null",
        "Functional appropriateness": "Medium",
        "Adaptability": "Medium",
        "Capacity": "Medium",
        "Reusability": "null",
        "Fault tolerance": "Medium",
        "Integrity": "null",
        "Accessibility": "Medium",
        "User error protection": "null",
        "Testability": "null",
        "Analysability": "null",
        "Interoperability": "null",
        "Accountability": "null",
        "Non-repudiation": "null",
        "Replaceability": "null"
    },
    {
        "softwareVersion": "10.1.0",
        "about": "Pillow\nPython Imaging Library (Fork)\nPillow is the friendly PIL fork by Jeffrey A. Clark (Alex) and contributors. This library provides extensive file format support, an efficient internal representation, and fairly powerful image processing capabilities. More Information\nDocumentation\nInstallation\nHandbook\nContribute\nIssues\nPull requests\nRelease notes\nChangelog\nPre-fork\nReport a Vulnerability\nTo report a security vulnerability, please follow the procedure described in the Tidelift security policy.",
        "abstract": "Python Imaging Library (Fork)",
        "dateModified": "Oct 15, 2023",
        "name": "Pillow",
        "url": "https://pypi.org/project/pillow/",
        "Quality Attribute": "pillow",
        "Resource utilization": "null",
        "Co-existence": "null",
        "Installability": "null",
        "Availability": "null",
        "Authenticity": "null",
        "Appropriateness recognizability": "High",
        "User interface aesthetics": "null",
        "Time behaviour": "High",
        "Functional completeness": "null",
        "Modifiability": "null",
        "Learnability": "null",
        "Recoverability": "null",
        "Operability": "High",
        "Modularity": "Low",
        "Maturity": "null",
        "Functional correctness": "null",
        "Confidentiality": "null",
        "Functional appropriateness": "null",
        "Adaptability": "null",
        "Capacity": "null",
        "Reusability": "null",
        "Fault tolerance": "null",
        "Integrity": "null",
        "Accessibility": "null",
        "User error protection": "null",
        "Testability": "null",
        "Analysability": "null",
        "Interoperability": "null",
        "Accountability": "null",
        "Non-repudiation": "null",
        "Replaceability": "null"
    },
    {
        "softwareVersion": "2.1.1",
        "about": "PyTorch is a Python package that provides two high-level features:\nTensor computation (like NumPy) with strong GPU acceleration\nDeep neural networks built on a tape-based autograd system\nYou can reuse your favorite Python packages such as NumPy, SciPy, and Cython to extend PyTorch when needed. More About PyTorch\nA GPU-Ready Tensor Library\nDynamic Neural Networks: Tape-Based Autograd\nPython First\nImperative Experiences\nFast and Lean\nExtensions Without Pain\nInstallation\nBinaries\nNVIDIA Jetson Platforms\nFrom Source\nPrerequisites\nInstall Dependencies\nGet the PyTorch Source\nInstall PyTorch\nAdjust Build Options (Optional)\nDocker Image\nUsing pre-built images\nBuilding the image yourself\nBuilding the Documentation\nPrevious Versions\nGetting Started\nResources\nCommunication\nReleases and Contributing\nThe Team\nLicense\nMore About PyTorch\nLearn the basics of PyTorch\nAt a granular level, PyTorch is a library that consists of the following components:\nComponent Description\ntorch A Tensor library like NumPy, with strong GPU support\ntorch.autograd A tape-based automatic differentiation library that supports all differentiable Tensor operations in torch\ntorch.jit A compilation stack (TorchScript) to create serializable and optimizable models from PyTorch code\ntorch.nn A neural networks library deeply integrated with autograd designed for maximum flexibility\ntorch.multiprocessing Python multiprocessing, but with magical memory sharing of torch Tensors across processes. Useful for data loading and Hogwild training\ntorch.utils DataLoader and other utility functions for convenience\nUsually, PyTorch is used either as:\nA replacement for NumPy to use the power of GPUs. Elaborating Further:\nA GPU-Ready Tensor Library\nIf you use NumPy, then you have used Tensors (a.k.a. Hence, PyTorch is quite fast \u2014 whether you run small or large neural networks. Extensions Without Pain\nWriting new neural network modules, or interfacing with PyTorch's Tensor API was designed to be straightforward and with minimal abstractions. Installation\nBinaries\nCommands to install binaries via Conda or pip wheels are on our website: https://pytorch.org/get-started/locally/\nNVIDIA Jetson Platforms\nPython wheels for NVIDIA's Jetson Nano, Jetson TX1/TX2, Jetson Xavier NX/AGX, and Jetson AGX Orin are provided here and the L4T container is published here\nThey require JetPack 4.2 and above, and @dusty-nv and @ptrblck are maintaining them. From Source\nPrerequisites\nIf you are installing from source, you will need:\nPython 3.8 or later (for Linux, Python 3.8.1+ is needed)\nA compiler that fully supports C++17, such as clang or gcc (especially for aarch64, gcc 9.4.0 or newer is required)\nWe highly recommend installing an Anaconda environment. If you want to compile with CUDA support, select a supported version of CUDA from our support matrix, then install the following:\nNVIDIA CUDA\nNVIDIA cuDNN v7 or above\nCompiler compatible with CUDA\nNote: You could refer to the cuDNN Support Matrix for cuDNN versions with the various supported CUDA, CUDA driver and NVIDIA hardware\nIf you want to disable CUDA support, export the environment variable USE_CUDA=0. If you are building for NVIDIA's Jetson platforms (Jetson Nano, TX1, TX2, AGX Xavier), Instructions to install PyTorch for Jetson Nano are available here\nIf you want to compile with ROCm support, install\nAMD ROCm 4.0 and above installation\nROCm is currently supported only for Linux systems. Install Dependencies\nCommon\nconda install cmake ninja\n# Run this command from the PyTorch directory after cloning the source code using the \u201cGet the PyTorch Source\u201c section below\npip install -r requirements.txt\nOn Linux\nconda install mkl mkl-include\n# CUDA only: Add LAPACK support for the GPU if needed\nconda install -c pytorch magma-cuda110  # or the magma-cuda* that matches your CUDA version from https://anaconda.org/pytorch/repo\n\n# (optional) If using torch.compile with inductor/triton, install the matching version of triton\n# Run from the pytorch directory after cloning\nmake triton\nOn MacOS\n# Add this package on intel x86 processor machines only\nconda install mkl mkl-include\n# Add these packages if torch.distributed is needed\nconda install pkg-config libuv\nOn Windows\nconda install mkl mkl-include\n# Add these packages if torch.distributed is needed. conda install -c conda-forge libuv=1.39\nGet the PyTorch Source\ngit clone --recursive https://github.com/pytorch/pytorch\ncd pytorch\n# if you are updating an existing checkout\ngit submodule sync\ngit submodule update --init --recursive\nInstall PyTorch\nOn Linux\nIf you would like to compile PyTorch with new C++ ABI enabled, then first run this command:\nexport _GLIBCXX_USE_CXX11_ABI=1\nIf you're compiling for AMD ROCm then first run this command:\n# Only run this if you're compiling for ROCm\npython tools/amd_build/build_amd.py\nInstall PyTorch\nexport CMAKE_PREFIX_PATH=${CONDA_PREFIX:-\"$(dirname $(which conda))/../\"}\npython setup.py develop\nAside: If you are using Anaconda, you may experience an error caused by the linker:\nbuild/temp.linux-x86_64-3.7/torch/csrc/stub.o: file not recognized: file format not recognized\ncollect2: error: ld returned 1 exit status\nerror: command 'g++' failed with exit status 1\nThis is caused by ld from the Conda environment shadowing the system ld. PyTorch CI uses Visual C++ BuildTools, which come with Visual Studio Enterprise, Professional, or Community Editions. If you want to build legacy python code, please refer to Building on legacy code and CUDA\nCPU-only builds\nIn this mode PyTorch computations will run on your CPU, not your GPU\nconda activate\npython setup.py develop\nNote on OpenMP: The desired OpenMP implementation is Intel OpenMP (iomp). Without these configurations for CMake, Microsoft Visual C OpenMP runtime (vcomp) will be used. You can refer to the build_pytorch.bat script for some other environment variables configurations\ncmd\n\n:: Set the environment variables after you have downloaded and unzipped the mkl package,\n:: else CMake would throw an error as `Could NOT find OpenMP`. :: [Optional] If you want to override the underlying toolset used by Ninja and Visual Studio with CUDA, please run the following script block. set CMAKE_GENERATOR_TOOLSET_VERSION=14.27\nset DISTUTILS_USE_SDK=1\nfor /f \"usebackq tokens=*\" %i in (`\"%ProgramFiles(x86)%\\Microsoft Visual Studio\\Installer\\vswhere.exe\" -version [15^,17^) -products * -latest -property installationPath`) do call \"%i\\VC\\Auxiliary\\Build\\vcvarsall.bat\" x64 -vcvars_ver=%CMAKE_GENERATOR_TOOLSET_VERSION%\n\n:: [Optional] If you want to override the CUDA host compiler\nset CUDAHOSTCXX=C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.27.29110\\bin\\HostX64\\x64\\cl.exe\n\npython setup.py develop\nADJUST BUILD OPTIONS (OPTIONAL)\nYou can adjust the configuration of cmake variables optionally (without building first), by doing the following. On Linux\nexport CMAKE_PREFIX_PATH=${CONDA_PREFIX:-\"$(dirname $(which conda))/../\"}\npython setup.py build --cmake-only\nccmake build  # or cmake-gui build\nOn macOS\nexport CMAKE_PREFIX_PATH=${CONDA_PREFIX:-\"$(dirname $(which conda))/../\"}\nMACOSX_DEPLOYMENT_TARGET=10.9 CC=clang CXX=clang++ python setup.py build --cmake-only\nccmake build  # or cmake-gui build\nDocker Image\nUsing pre-built images\nYou can also pull a pre-built docker image from Docker Hub and run with docker v19.03+\ndocker run --gpus all --rm -ti --ipc=host pytorch/pytorch:latest\nPlease note that PyTorch uses shared memory to share data between processes, so if torch multiprocessing is used (e.g. for multithreaded data loaders) the default shared memory segment size that container runs with is not enough, and you should increase shared memory size either with --ipc=host or --shm-size command line options to nvidia-docker run. If it persists, try npm install -g katex\nNote: if you installed nodejs with a different package manager (e.g., conda) then npm will probably install a version of katex that is not compatible with your version of nodejs and doc builds will fail. Getting Started\nThree-pointers to get you started:\nTutorials: get you started with understanding and using PyTorch\nExamples: easy to understand PyTorch code across all domains\nThe API Reference\nGlossary\nResources\nPyTorch.org\nPyTorch Tutorials\nPyTorch Examples\nPyTorch Models\nIntro to Deep Learning with PyTorch from Udacity\nIntro to Machine Learning with PyTorch from Udacity\nDeep Neural Networks with PyTorch from Coursera\nPyTorch Twitter\nPyTorch Blog\nPyTorch YouTube\nCommunication\nForums: Discuss implementations, research, etc. https://discuss.pytorch.org\nGitHub Issues: Bug reports, feature requests, install issues, RFCs, thoughts, etc. Slack: The PyTorch Slack hosts a primary audience of moderate to experienced PyTorch users and developers for general chat, online discussions, collaboration, etc. If you need a slack invite, please fill this form: https://goo.gl/forms/PP1AGvNHpSaJP8to1\nNewsletter: No-noise, a one-way email newsletter with important announcements about PyTorch. https://www.facebook.com/pytorch\nFor brand guidelines, please visit our website at pytorch.org\nReleases and Contributing\nTypically, PyTorch has three minor releases a year. A non-exhaustive but growing list needs to mention: Trevor Killeen, Sasank Chilamkurthy, Sergey Zagoruyko, Adam Lerer, Francisco Massa, Alykhan Tejani, Luca Antiga, Alban Desmaison, Andreas Koepf, James Bradbury, Zeming Lin, Yuandong Tian, Guillaume Lample, Marat Dukhan, Natalia Gimelshein, Christian Sarofeen, Martin Raison, Edward Yang, Zachary Devito.",
        "abstract": "Tensors and Dynamic neural networks in Python with strong GPU acceleration",
        "dateModified": "Nov 15, 2023",
        "name": "torch",
        "url": "https://pypi.org/project/torch/",
        "Quality Attribute": "torch",
        "Resource utilization": "Medium",
        "Co-existence": "Medium",
        "Installability": "Medium",
        "Availability": "Medium",
        "Authenticity": "Medium",
        "Appropriateness recognizability": "Medium",
        "User interface aesthetics": "Medium",
        "Time behaviour": "Medium",
        "Functional completeness": "Low",
        "Modifiability": "High",
        "Learnability": "Medium",
        "Recoverability": "null",
        "Operability": "High",
        "Modularity": "High",
        "Maturity": "High",
        "Functional correctness": "null",
        "Confidentiality": "null",
        "Functional appropriateness": "null",
        "Adaptability": "Medium",
        "Capacity": "Medium",
        "Reusability": "null",
        "Fault tolerance": "High",
        "Integrity": "null",
        "Accessibility": "null",
        "User error protection": "null",
        "Testability": "null",
        "Analysability": "null",
        "Interoperability": "null",
        "Accountability": "null",
        "Non-repudiation": "null",
        "Replaceability": "null"
    },
    {
        "softwareVersion": "5.0.1",
        "about": "Installation | Usage | Advanced Topics | Contributing\n**Note: ** redis-py 5.0 will be the last version of redis-py to support Python 3.7, as it has reached end of life. Installation\nStart a redis via docker:\ndocker run -p 6379:6379 -it redis/redis-stack:latest\nTo install redis-py, simply:\n$ pip install redis\nFor faster performance, install redis with hiredis support, this provides a compiled response parser, and for most cases requires zero code changes. By default, if hiredis >= 1.0 is available, redis-py will attempt to use it for response parsing. Library version Supported redis versions\n3.5.3 <= 6.2 Family of releases\n>= 4.5.0 Version 5.0 to 7.0\n>= 5.0.0 Version 5.0 to current\nUsage\nBasic Example\n>>> import redis\n>>> r = redis.Redis(host='localhost', port=6379, db=0)\n>>> r.set('foo', 'bar')\nTrue\n>>> r.get('foo')\nb'bar'\nThe above code connects to localhost on port 6379, sets a value in Redis, and retrieves it. RESP3 Support\nTo enable support for RESP3, ensure you have at least version 5.0 of the client, and change your connection object to include protocol=3\n>>> import redis\n>>> r = redis.Redis(host='localhost', port=6379, db=0, protocol=3)\nConnection Pools\nBy default, redis-py uses a connection pool to manage connections. >>> pool = redis.ConnectionPool(host='localhost', port=6379, db=0)\n>>> r = redis.Redis(connection_pool=pool)\nAlternatively, you might want to look at Async connections, or Cluster connections, or even Async Cluster connections. They are exposed using the raw Redis command names (HSET, HGETALL, etc.) SUBSCRIBE/LISTEN: Similar to pipelines, PubSub is implemented as a separate class as it places the underlying connection in a state where it can't execute non-pubsub commands. >>> pipe = r.pipeline()\n>>> pipe.set('foo', 5)\n>>> pipe.set('bar', 18.5)\n>>> pipe.set('blee', \"hello world!\") >>> pipe.execute()\n[True, True, True]\nPubSub\nThe following example shows how to utilize Redis Pub/Sub to subscribe to specific channels. >>> r = redis.Redis(...)\n>>> p = r.pubsub()\n>>> p.subscribe('my-first-channel', 'my-second-channel', ...)\n>>> p.get_message()\n{'pattern': None, 'type': 'subscribe', 'channel': b'my-second-channel', 'data': 1}\nAuthor\nredis-py is developed and maintained by Redis Inc.",
        "abstract": "Python client for Redis database and key-value store",
        "dateModified": "Sep 26, 2023",
        "name": "redis",
        "url": "https://pypi.org/project/redis/",
        "Quality Attribute": "redis",
        "Resource utilization": "High",
        "Co-existence": "High",
        "Installability": "High",
        "Availability": "Medium",
        "Authenticity": "High",
        "Appropriateness recognizability": "Medium",
        "User interface aesthetics": "Low",
        "Time behaviour": "High",
        "Functional completeness": "High",
        "Modifiability": "High",
        "Learnability": "Medium",
        "Recoverability": "Medium",
        "Operability": "High",
        "Modularity": "null",
        "Maturity": "High",
        "Functional correctness": "null",
        "Confidentiality": "null",
        "Functional appropriateness": "null",
        "Adaptability": "null",
        "Capacity": "Medium",
        "Reusability": "null",
        "Fault tolerance": "High",
        "Integrity": "null",
        "Accessibility": "null",
        "User error protection": "null",
        "Testability": "null",
        "Analysability": "null",
        "Interoperability": "null",
        "Accountability": "null",
        "Non-repudiation": "null",
        "Replaceability": "null"
    },
    {
        "softwareVersion": "2.31.0",
        "about": ">>> import requests\n>>> r = requests.get('https://httpbin.org/basic-auth/user/pass', auth=('user', 'pass'))\n>>> r.status_code\n200\n>>> r.headers['content-type']\n'application/json; charset=utf8'\n>>> r.encoding\n'utf-8'\n>>> r.text\n'{\"authenticated\": true, ...'\n>>> r.json()\n{'authenticated': True, ...}\nRequests allows you to send HTTP/1.1 requests extremely easily. Keep-Alive & Connection Pooling\nInternational Domains and URLs\nSessions with Cookie Persistence\nBrowser-style TLS/SSL Verification\nBasic & Digest Authentication\nFamiliar dict\u2013like Cookies\nAutomatic Content Decompression and Decoding\nMulti-part File Uploads\nSOCKS Proxy Support\nConnection Timeouts\nStreaming Downloads\nAutomatic honoring of .netrc\nChunked HTTP Requests\nAPI Reference and User Guide available on Read the Docs\nCloning the repository\nWhen cloning the Requests repository, you may need to add the -c fetch.fsck.badTimezone=ignore flag to avoid an error about a bad commit (see this issue for more background):\ngit clone -c fetch.fsck.badTimezone=ignore https://github.com/psf/requests.git\nYou can also apply this setting to your global Git config:\ngit config --global fetch.fsck.badTimezone ignore",
        "abstract": "Python HTTP for Humans.",
        "dateModified": "May 22, 2023",
        "name": "requests",
        "url": "https://pypi.org/project/requests/",
        "Quality Attribute": "requests",
        "Resource utilization": "null",
        "Co-existence": "null",
        "Installability": "High",
        "Availability": "null",
        "Authenticity": "null",
        "Appropriateness recognizability": "null",
        "User interface aesthetics": "null",
        "Time behaviour": "null",
        "Functional completeness": "null",
        "Modifiability": "null",
        "Learnability": "null",
        "Recoverability": "null",
        "Operability": "High",
        "Modularity": "null",
        "Maturity": "null",
        "Functional correctness": "null",
        "Confidentiality": "null",
        "Functional appropriateness": "null",
        "Adaptability": "null",
        "Capacity": "null",
        "Reusability": "null",
        "Fault tolerance": "null",
        "Integrity": "null",
        "Accessibility": "null",
        "User error protection": "null",
        "Testability": "null",
        "Analysability": "null",
        "Interoperability": "null",
        "Accountability": "null",
        "Non-repudiation": "null",
        "Replaceability": "null"
    },
    {
        "softwareVersion": "1.3.2",
        "about": "Website: https://scikit-learn.org\nInstallation\nDependencies\nscikit-learn requires:\nPython (>= 3.8)\nNumPy (>= 1.17.3)\nSciPy (>= 1.5.0)\njoblib (>= 1.1.1)\nthreadpoolctl (>= 2.0.0)\nScikit-learn 0.20 was the last version to support Python 2.7 and Python 3.4. scikit-learn 1.0 and later require Python 3.7 or newer. User installation\nIf you already have a working installation of numpy and scipy, the easiest way to install scikit-learn is using pip:\npip install -U scikit-learn\nor conda:\nconda install -c conda-forge scikit-learn\nThe documentation includes more detailed installation instructions. Important links\nOfficial source code repo: https://github.com/scikit-learn/scikit-learn\nDownload releases: https://pypi.org/project/scikit-learn/\nIssue tracker: https://github.com/scikit-learn/scikit-learn/issues\nSource code\nYou can check the latest sources with the command:\ngit clone https://github.com/scikit-learn/scikit-learn.git\nContributing\nTo learn more about making a contribution to scikit-learn, please see our Contributing guide. Testing\nAfter installation, you can launch the test suite from outside the source directory (you will need to have pytest >= 7.1.2 installed):\npytest sklearn\nSee the web page https://scikit-learn.org/dev/developers/contributing.html#testing-and-improving-test-coverage for more information. Submitting a Pull Request\nBefore opening a Pull Request, have a look at the full Contributing page to make sure your code complies with our guidelines: https://scikit-learn.org/stable/developers/index.html\nProject History\nThe project was started in 2007 by David Cournapeau as a Google Summer of Code project, and since then many volunteers have contributed. Help and Support\nDocumentation\nHTML documentation (stable release): https://scikit-learn.org\nHTML documentation (development version): https://scikit-learn.org/dev/\nFAQ: https://scikit-learn.org/stable/faq.html\nCommunication\nMailing list: https://mail.python.org/mailman/listinfo/scikit-learn\nGitter: https://gitter.im/scikit-learn/scikit-learn\nLogos & Branding: https://github.com/scikit-learn/scikit-learn/tree/main/doc/logos\nBlog: https://blog.scikit-learn.org\nCalendar: https://blog.scikit-learn.org/calendar/\nTwitter: https://twitter.com/scikit_learn\nStack Overflow: https://stackoverflow.com/questions/tagged/scikit-learn\nGithub Discussions: https://github.com/scikit-learn/scikit-learn/discussions\nWebsite: https://scikit-learn.org\nLinkedIn: https://www.linkedin.com/company/scikit-learn\nYouTube: https://www.youtube.com/channel/UCJosFjYm0ZYVUARxuOZqnnw/playlists\nFacebook: https://www.facebook.com/scikitlearnofficial/\nInstagram: https://www.instagram.com/scikitlearnofficial/\nTikTok: https://www.tiktok.com/@scikit.learn\nCitation\nIf you use scikit-learn in a scientific publication, we would appreciate citations: https://scikit-learn.org/stable/about.html#citing-scikit-learn",
        "abstract": "A set of python modules for machine learning and data mining",
        "dateModified": "Oct 23, 2023",
        "name": "scikit-learn",
        "url": "https://pypi.org/project/scikit-learn/",
        "Quality Attribute": "scikit-learn",
        "Resource utilization": "Low",
        "Co-existence": "High",
        "Installability": "High",
        "Availability": "High",
        "Authenticity": "null",
        "Appropriateness recognizability": "High",
        "User interface aesthetics": "High",
        "Time behaviour": "Medium",
        "Functional completeness": "High",
        "Modifiability": "Medium",
        "Learnability": "Medium",
        "Recoverability": "null",
        "Operability": "High",
        "Modularity": "null",
        "Maturity": "High",
        "Functional correctness": "null",
        "Confidentiality": "null",
        "Functional appropriateness": "null",
        "Adaptability": "Medium",
        "Capacity": "High",
        "Reusability": "null",
        "Fault tolerance": "High",
        "Integrity": "null",
        "Accessibility": "null",
        "User error protection": "null",
        "Testability": "null",
        "Analysability": "null",
        "Interoperability": "null",
        "Accountability": "null",
        "Non-repudiation": "null",
        "Replaceability": "null"
    },
    {
        "softwareVersion": "1.11.4",
        "about": "Website: https://scipy.org\nDocumentation: https://docs.scipy.org/doc/scipy/\nDevelopment version of the documentation: https://scipy.github.io/devdocs\nMailing list: https://mail.python.org/mailman3/lists/scipy-dev.python.org/\nSource code: https://github.com/scipy/scipy\nContributing: https://scipy.github.io/devdocs/dev/index.html\nBug reports: https://github.com/scipy/scipy/issues\nCode of Conduct: https://docs.scipy.org/doc/scipy/dev/conduct/code_of_conduct.html\nReport a security vulnerability: https://tidelift.com/docs/security\nCiting in your work: https://www.scipy.org/citing-scipy/\nSciPy is built to work with NumPy arrays, and provides many user-friendly and efficient numerical routines, such as routines for numerical integration and optimization. You can also:\nreview pull requests\ntriage issues\ndevelop tutorials, presentations, and other educational materials\nmaintain and improve our website\ndevelop graphic design for our brand assets and promotional materials\nhelp with outreach and onboard new contributors\nwrite grant proposals and help with other fundraising efforts\nIf you\u2019re unsure where to start or how your skills fit in, reach out!",
        "abstract": "Fundamental algorithms for scientific computing in Python",
        "dateModified": "Nov 18, 2023",
        "name": "scipy",
        "url": "https://pypi.org/project/scipy/",
        "Quality Attribute": "scipy",
        "Resource utilization": "Medium",
        "Co-existence": "Medium",
        "Installability": "Medium",
        "Availability": "Low",
        "Authenticity": "null",
        "Appropriateness recognizability": "High",
        "User interface aesthetics": "Medium",
        "Time behaviour": "Medium",
        "Functional completeness": "Medium",
        "Modifiability": "Medium",
        "Learnability": "Medium",
        "Recoverability": "Medium",
        "Operability": "null",
        "Modularity": "null",
        "Maturity": "High",
        "Functional correctness": "Medium",
        "Confidentiality": "Medium",
        "Functional appropriateness": "Medium",
        "Adaptability": "null",
        "Capacity": "Medium",
        "Reusability": "null",
        "Fault tolerance": "High",
        "Integrity": "null",
        "Accessibility": "null",
        "User error protection": "null",
        "Testability": "Medium",
        "Analysability": "Medium",
        "Interoperability": "High",
        "Accountability": "null",
        "Non-repudiation": "null",
        "Replaceability": "null"
    },
    {
        "softwareVersion": "2.11.0",
        "about": "Check the Scrapy homepage at https://scrapy.org for more information, including a list of features. Requirements\nPython 3.8+\nWorks on Linux, Windows, macOS, BSD\nInstall\nThe quick way:\npip install scrapy\nSee the install section in the documentation at https://docs.scrapy.org/en/latest/intro/install.html for more details. Community (blog, twitter, mail list, IRC)\nSee https://scrapy.org/community/ for details.",
        "abstract": "A high-level Web Crawling and Web Scraping framework",
        "dateModified": "Sep 18, 2023",
        "name": "Scrapy",
        "url": "https://pypi.org/project/scrapy/",
        "Quality Attribute": "scrapy",
        "Resource utilization": "Medium",
        "Co-existence": "High",
        "Installability": "Medium",
        "Availability": "Medium",
        "Authenticity": "Low",
        "Appropriateness recognizability": "Medium",
        "User interface aesthetics": "Medium",
        "Time behaviour": "Medium",
        "Functional completeness": "null",
        "Modifiability": "High",
        "Learnability": "Medium",
        "Recoverability": "null",
        "Operability": "High",
        "Modularity": "null",
        "Maturity": "High",
        "Functional correctness": "Medium",
        "Confidentiality": "null",
        "Functional appropriateness": "Medium",
        "Adaptability": "null",
        "Capacity": "Medium",
        "Reusability": "null",
        "Fault tolerance": "High",
        "Integrity": "null",
        "Accessibility": "null",
        "User error protection": "null",
        "Testability": "Medium",
        "Analysability": "null",
        "Interoperability": "null",
        "Accountability": "null",
        "Non-repudiation": "null",
        "Replaceability": "null"
    },
    {
        "softwareVersion": "4.15.2",
        "about": "Home:\nhttps://selenium.dev\nGitHub:\nhttps://github.com/SeleniumHQ/Selenium\nPyPI:\nhttps://pypi.org/project/selenium/\nIRC/Slack:\nSelenium chat room\nSeveral browsers/drivers are supported (Firefox, Chrome, Internet Explorer), as well as the Remote protocol. Supported Python Versions\nPython 3.8+\nInstalling\nIf you have pip on your system, you can simply install or upgrade the Python bindings:\npip install -U selenium\nAlternately, you can download the source distribution from PyPI <https://pypi.org/project/selenium/#files>, unarchive it, and run:\npython setup.py install\nNote: You may want to consider using virtualenv to create isolated Python environments. Chrome:\nhttps://chromedriver.chromium.org/downloads\nEdge:\nhttps://developer.microsoft.com/en-us/microsoft-edge/tools/webdriver/\nFirefox:\nhttps://github.com/mozilla/geckodriver/releases\nSafari:\nhttps://webkit.org/blog/6900/webdriver-support-in-safari-10/\nExample 0:\nopen a new Firefox browser\nload the page at the given URL\nfrom selenium import webdriver\n\nbrowser = webdriver.Firefox()\nbrowser.get('http://selenium.dev/')\nExample 1:\nopen a new Firefox browser\nload the Yahoo homepage\nsearch for \u201cseleniumhq\u201d\nclose the browser\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.common.keys import Keys\n\nbrowser = webdriver.Firefox()\n\nbrowser.get('http://www.yahoo.com')\nassert 'Yahoo' in browser.title\n\nelem = browser.find_element(By.NAME, 'p')  # Find the search box\nelem.send_keys('seleniumhq' + Keys.RETURN)\n\nbrowser.quit()\nExample 2:\nSelenium WebDriver is often used as a basis for testing web applications. Here is a simple example using Python\u2019s standard unittest library:\nimport unittest\nfrom selenium import webdriver\n\nclass GoogleTestCase(unittest.TestCase):\n\n    def setUp(self):\n        self.browser = webdriver.Firefox()\n        self.addCleanup(self.browser.quit)\n\n    def test_page_title(self):\n        self.browser.get('http://www.google.com')\n        self.assertIn('Google', self.browser.title)\n\nif __name__ == '__main__':\n    unittest.main(verbosity=2)\nSelenium Server (optional)\nFor normal WebDriver scripts (non-Remote), the Java server is not needed. Download the server separately, from: https://www.selenium.dev/downloads/\nRun the server from the command line:\njava -jar selenium-server-4.15.0.jar\nThen run your Python client scripts. View source code online:\nOfficial:\nhttps://github.com/SeleniumHQ/selenium/tree/trunk/py\nContributing\nCreate a branch for your work\nEnsure tox is installed (using a virtualenv is recommended)\npython3.8 -m venv .venv && .",
        "abstract": "No project description provided",
        "dateModified": "Nov 3, 2023",
        "name": "selenium",
        "url": "https://pypi.org/project/selenium/",
        "Quality Attribute": "selenium",
        "Resource utilization": "Medium",
        "Co-existence": "Medium",
        "Installability": "Medium",
        "Availability": "Medium",
        "Authenticity": "Medium",
        "Appropriateness recognizability": "Medium",
        "User interface aesthetics": "Medium",
        "Time behaviour": "Medium",
        "Functional completeness": "Medium",
        "Modifiability": "Medium",
        "Learnability": "Medium",
        "Recoverability": "Medium",
        "Operability": "High",
        "Modularity": "Low",
        "Maturity": "Medium",
        "Functional correctness": "High",
        "Confidentiality": "Low",
        "Functional appropriateness": "High",
        "Adaptability": "Medium",
        "Capacity": "Medium",
        "Reusability": "Medium",
        "Fault tolerance": "Medium",
        "Integrity": "Low",
        "Accessibility": "Low",
        "User error protection": "Low",
        "Testability": "Medium",
        "Analysability": "null",
        "Interoperability": "null",
        "Accountability": "null",
        "Non-repudiation": "null",
        "Replaceability": "null"
    },
    {
        "softwareVersion": "0.0.1",
        "about": "",
        "abstract": "sqlite3 driver for db",
        "dateModified": "Jun 10, 2013",
        "name": "db-sqlite3",
        "url": "https://pypi.org/project/db-sqlite3/",
        "Quality Attribute": "db-sqlite3",
        "Resource utilization": "Medium",
        "Co-existence": "High",
        "Installability": "High",
        "Availability": "Medium",
        "Authenticity": "null",
        "Appropriateness recognizability": "High",
        "User interface aesthetics": "High",
        "Time behaviour": "High",
        "Functional completeness": "High",
        "Modifiability": "High",
        "Learnability": "High",
        "Recoverability": "Medium",
        "Operability": "High",
        "Modularity": "null",
        "Maturity": "High",
        "Functional correctness": "null",
        "Confidentiality": "Medium",
        "Functional appropriateness": "null",
        "Adaptability": "High",
        "Capacity": "Medium",
        "Reusability": "null",
        "Fault tolerance": "High",
        "Integrity": "Medium",
        "Accessibility": "null",
        "User error protection": "null",
        "Testability": "null",
        "Analysability": "null",
        "Interoperability": "null",
        "Accountability": "null",
        "Non-repudiation": "null",
        "Replaceability": "null"
    },
    {
        "softwareVersion": "2.15.0.post1",
        "about": "Its flexible architecture allows easy deployment of computation across a variety of platforms (CPUs, GPUs, TPUs), and from desktops to clusters of servers to mobile and edge devices. Originally developed by researchers and engineers from the Google Brain team within Google's AI organization, it comes with strong support for machine learning and deep learning and the flexible numerical computation core is used across many other scientific domains.",
        "abstract": "TensorFlow is an open source machine learning framework for everyone.",
        "dateModified": "Dec 5, 2023",
        "name": "tensorflow",
        "url": "https://pypi.org/project/tensorflow/",
        "Quality Attribute": "tensorflow",
        "Resource utilization": "Medium",
        "Co-existence": "Medium",
        "Installability": "Medium",
        "Availability": "Medium",
        "Authenticity": "Medium",
        "Appropriateness recognizability": "Medium",
        "User interface aesthetics": "Medium",
        "Time behaviour": "Medium",
        "Functional completeness": "Low",
        "Modifiability": "Medium",
        "Learnability": "Medium",
        "Recoverability": "Medium",
        "Operability": "High",
        "Modularity": "Medium",
        "Maturity": "High",
        "Functional correctness": "Medium",
        "Confidentiality": "Medium",
        "Functional appropriateness": "Medium",
        "Adaptability": "Medium",
        "Capacity": "Medium",
        "Reusability": "Medium",
        "Fault tolerance": "High",
        "Integrity": "Low",
        "Accessibility": "Medium",
        "User error protection": "High",
        "Testability": "null",
        "Analysability": "null",
        "Interoperability": "null",
        "Accountability": "null",
        "Non-repudiation": "null",
        "Replaceability": "null"
    }
]